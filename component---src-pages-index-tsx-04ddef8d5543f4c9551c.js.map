{"version":3,"file":"component---src-pages-index-tsx-04ddef8d5543f4c9551c.js","mappings":"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","sources":["webpack://microskhemka/./node_modules/@bem-react/classname/build/classname.production.min.js","webpack://microskhemka/./node_modules/@bem-react/classname/index.js","webpack://microskhemka/./node_modules/camelcase/index.js","webpack://microskhemka/../src/image-utils.ts","webpack://microskhemka/../src/components/hooks.ts","webpack://microskhemka/../src/components/layout-wrapper.tsx","webpack://microskhemka/../src/components/picture.tsx","webpack://microskhemka/../src/components/placeholder.tsx","webpack://microskhemka/../src/components/main-image.tsx","webpack://microskhemka/../src/components/gatsby-image.server.tsx","webpack://microskhemka/../src/components/gatsby-image.browser.tsx","webpack://microskhemka/../src/components/static-image.server.tsx","webpack://microskhemka/../src/components/static-image.tsx","webpack://microskhemka/./src/colors.const.ts","webpack://microskhemka/./src/components/Slide/Slide.tsx","webpack://microskhemka/./src/components/Text/Text.tsx","webpack://microskhemka/./src/components/Title/Title.tsx","webpack://microskhemka/./src/components/Button/Button.tsx","webpack://microskhemka/./src/views/index/Main/Main.tsx","webpack://microskhemka/./src/views/index/ProgrammingLanguages/ProgrammingLanguages.tsx","webpack://microskhemka/./src/tools/cloneElement.tsx","webpack://microskhemka/./src/components/Card/Card.tsx","webpack://microskhemka/./src/components/CardList/CardList.tsx","webpack://microskhemka/./src/views/index/Overview/Overview.tsx","webpack://microskhemka/./src/views/index/News/News.tsx","webpack://microskhemka/./src/views/index/Partners/__Card/PartnersCard.tsx","webpack://microskhemka/./src/views/index/Partners/Partners.tsx","webpack://microskhemka/./src/views/index/MasterClass/MasterClass.tsx","webpack://microskhemka/./src/views/index/Blog/__Card/BlogCard.tsx","webpack://microskhemka/./src/views/index/Blog/Blog.tsx","webpack://microskhemka/./src/pages/index.tsx","webpack://microskhemka/./src/tools/getClassName.ts","webpack://microskhemka/./src/components/Header/Header.tsx","webpack://microskhemka/./src/components/Footer/Footer.tsx","webpack://microskhemka/./src/components/layout.js","webpack://microskhemka/./src/components/seo.js"],"sourcesContent":["'use strict';function r(r){function t(t,i,a,o){var f=i?e+t+r.e+i:e+t,v=f;if(a){var s=' '+v+r.m;for(var u in a)if(a.hasOwnProperty(u)){var p=a[u];!0===p?v+=s+u:p&&(v+=s+u+n+p)}}if(void 0!==o)for(var y=0,c=(o=Array.isArray(o)?o:[o]).length;y<c;y++){var l=o[y];if(l&&'string'==typeof l.valueOf())for(var g=l.valueOf().split(' '),d=0;d<g.length;d++){var h=g[d];h!==f&&(v+=' '+h)}}return v}var e=r.n||'',n=r.v||r.m;return function(r,e){return function(n,i,a){return'string'==typeof n?'string'==typeof i||Array.isArray(i)?t(r,n,void 0,i):t(r,n,i,a):t(r,e,n,i)}}}Object.defineProperty(exports,'__esModule',{value:!0});var t=r({e:'-',m:'_'});exports.cn=t,exports.withNaming=r;\n","'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./build/classname.production.min.js')\n} else {\n  module.exports = require('./build/classname.development.js')\n}\n","'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))\n\t\t.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false ?\n\t\tstring => string.toLowerCase() :\n\t\tstring => string.toLocaleLowerCase(options.locale);\n\tconst toUpperCase = options.locale === false ?\n\t\tstring => string.toUpperCase() :\n\t\tstring => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input, toLowerCase);\n\t} else {\n\t\tinput = toLowerCase(input);\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","export enum COLORS {\n  MIGOL_BLUE = '#28337B',\n  HEART_OF_ICE = '#F9FCFF',\n  RED = '#E75252',\n  GREEN = '#1BBFA3',\n  FOOTER = '#25304E',\n}\n\nexport const FONT_COLORS = {\n  'black': '#48484E',\n  'white': '#FBFDFD',\n  'grey': '#686868',\n  'light-grey': '#888',\n  'light-red': '#EC9B9A',\n  'light-green': '#90D2CE',\n  'footer': '#ACABB2',\n}\n\nexport type TFontColors = 'black' | 'white' | 'grey' | 'light-grey' | 'light-red' | 'light-green' | 'footer';\nexport type TColors = keyof typeof COLORS;\n","import React from \"react\";\nimport { COLORS } from \"../../colors.const\";\nimport { getClassName } from \"../../tools/getClassName\";\n\nconst cn = getClassName(\"slide\");\n\nimport './Slide.scss';\n\nexport type Props = {\n  className?: string,\n  children: React.ReactNode,\n  backgroundColor?: COLORS | string,\n  flexible?: boolean,\n};\n\nexport const Slide = ({\n  className,\n  children,\n  backgroundColor = COLORS.HEART_OF_ICE,\n  flexible\n}: Props) => {\n  const style = React.useMemo(() => ({ backgroundColor }), [backgroundColor]);\n\n  return <div className={cn({ flexible }, className)} style={style}>\n    {children}\n  </div>\n}\n","import React, { useMemo } from 'react';\nimport { getClassName } from '../../tools/getClassName';\nimport { FONT_COLORS, TFontColors } from \"../../colors.const\";\n\nimport './Text.scss';\n\nexport type Props = {\n  children: React.ReactNode,\n  as?: 'p' | 'span' | 'div',\n  color: TFontColors,\n  className?: string,\n}\n\nconst cn = getClassName('text');\n\nexport const Text = ({ children, as, color, className }: Props) => {\n  const Component = as || 'p';\n\n  const style = useMemo(() => ({ color: FONT_COLORS[color] }), [color]);\n\n  return <Component style={style} className={cn(null, className)}>{children}</Component>;\n}","import React from \"react\";\nimport { useMemo } from \"react\";\nimport { FONT_COLORS, TFontColors } from \"../../colors.const\";\nimport { getClassName } from \"../../tools/getClassName\";\n\nimport './Title.scss';\n\ntype TitleProps = {\n    children: React.ReactNode,\n    as?: 'h1' | 'h2' | 'h3' | 'span',\n    color?: TFontColors,\n    className?: string,\n    subtitle?: boolean,\n}\n\nconst cn = getClassName('title');\n\nexport const Title = ({\n  children,\n  as,\n  color = 'black',\n  className,\n  subtitle,\n}: TitleProps) => {\n  const Component = as ?? 'span';\n  const style = useMemo(() => ({ color: FONT_COLORS[color] }), [color]);\n\n  return <Component style={style} className={cn({ subtitle }, className)}>{children}</Component>\n}","import React from 'react';\nimport { getClassName } from '../../tools/getClassName';\n\nimport './Button.scss';\n\nconst cn = getClassName('button');\n\ntype Props = React.HTMLAttributes<HTMLButtonElement> & {\n  color?: 'white' | 'orange',\n};\n\nexport const Button = ({ className, color, ...props }: Props) => (\n  <button\n    className={cn({ color }, className)}\n    {...props}\n  />);","import React from \"react\";\nimport { getClassName } from \"../../../tools/getClassName\";\nimport { Title } from \"../../../components/Title/Title\";\nimport { Text } from \"../../../components/Text/Text\";\n\nimport { Button } from \"../../../components/Button/Button\";\n\nimport './Main.scss';\n\nconst cn = getClassName('index-main');\n\nexport const Main = () => (\n  <div className={cn()}>\n    <div className={cn('title-desc')}>\n      <Title as='h1' color='white'>Explore Robotics</Title>\n      <Text color='white'>Dive into the future of robotics with our comprehensive masterclasses\n        covering Lego, Tinkercad, 3D printing, and Arduino programming alongside Python\n      </Text>\n      <Button>\n        <Text color='white'>Sing up now</Text>\n      </Button>\n    </div>\n  </div>\n);\n","import React from \"react\";\nimport { getClassName } from \"../../../tools/getClassName\";\nimport { Title } from \"../../../components/Title/Title\";\n\nimport './ProgrammingLanguages.scss';\n\nconst cn = getClassName('programming-languages');\n\nexport const ProgrammingLanguages = () => (\n  <div className={cn()}>\n    <Title\n      className={cn('title')}\n      as='h2'\n      color='black'\n    >\n        Programming Languages: Python, C, and Scratch for Enhancing Models\n    </Title>\n  </div>\n);\n","import React from \"react\";\n\nexport const cloneElement = (elem: React.ReactNode, extraProps: Record<string, any>) => {\n  if (elem && typeof elem === 'object' && ('type' in elem)) {\n    const { props } = elem;\n\n    const className = [props.className, extraProps.className].filter(Boolean).join(' ');\n\n    return <elem.type\n      {...props}\n      className={className}>\n      {props?.children}\n    </elem.type>\n  }\n\n  return elem;\n}","import React from 'react';\nimport { getClassName } from '../../tools/getClassName';\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\nimport { cloneElement } from '../../tools/cloneElement';\nimport { Text } from '../Text/Text';\n\nexport type Props = {\n  title: string;\n  subtitle: string;\n  ImageNode: React.ReactNode;\n  className?: string;\n};\n\nconst cn = getClassName('card');\n\nimport './Card.scss';\n\nexport const Card: React.FC<Props> = ({ title, subtitle, ImageNode, className }) => {\n  return (\n    <div className={cn(null, className)}>\n      <div className={cn('image-wrapper')}>\n       {cloneElement(ImageNode, { className: cn('image') })}\n      </div>\n      <div className={cn('content')}>\n        <Text color='grey' className={cn('title')}>{title}</Text>\n        <Text color='light-grey' className={cn('subtitle')}>{subtitle}</Text>\n      </div>\n    </div>\n  );\n};\n\n","import React from 'react';\nimport { getClassName } from '../../tools/getClassName';\n\nimport { Card, Props as CardProps } from '../Card/Card';\n\ntype Props = {\n  className?: string;\n  items: CardProps[];\n}\n\nconst cn = getClassName('card-list');\n\nimport './CardList.scss';\n\nexport const CardList = ({\n  className,\n  items\n}: Props) => (\n  <div className={cn(null, className)}>\n    {items.map((item) => (<Card {...item} className={cn('item')} />))}\n  </div>\n);\n","import React from \"react\";\nimport { getClassName } from \"../../../tools/getClassName\";\nimport { Title } from \"../../../components/Title/Title\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport { CardList } from \"../../../components/CardList/CardList\";\n\nimport './Overview.scss';\n\nconst cn = getClassName('overview');\n\nconst items = [\n  { title: 'Arduino basics', ImageNode: <StaticImage src='./assets/Arduino.jpg' alt='' />, subtitle: 'Arduino projects' },\n  { title: 'Scratch coding', ImageNode: <StaticImage src='./assets/Scratch_2.jpg' alt='' />, subtitle: 'Video games' },\n  { title: 'Python intro', ImageNode: <StaticImage src='./assets/Robot.jpg' alt='' />, subtitle: 'Math' },\n  { title: 'C programming language', ImageNode: <StaticImage src='./assets/C.jpg' alt='' />, subtitle: 'Arduino projects' },\n]\n\nexport const Overview = (props: { className?: string }) => (\n  <div className={cn(null, props.className)}>\n    <Title subtitle color='light-grey'>Quick guide</Title>\n    <CardList className={cn('list')} items={items} />\n  </div>\n);","import React from \"react\";\nimport { getClassName } from \"../../../tools/getClassName\";\nimport { Title } from \"../../../components/Title/Title\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport { CardList } from \"../../../components/CardList/CardList\";\n\nimport './News.scss';\n\nconst cn = getClassName('news');\n\nconst items = [\n  { title: 'Arduino basics', ImageNode: <StaticImage src='./assets/Arduino.jpg' alt='' />, subtitle: 'Arduino projects' },\n  { title: 'Scratch coding', ImageNode: <StaticImage src='./assets/Scratch_2.jpg' alt='' />, subtitle: 'Video games' },\n  { title: 'Python intro', ImageNode: <StaticImage src='./assets/Robot.jpg' alt='' />, subtitle: 'Math' },\n  { title: 'C programming language', ImageNode: <StaticImage src='./assets/C.jpg' alt='' />, subtitle: 'Arduino projects' },\n]\n\nexport const News = (props: { className?: string }) => (\n  <div className={cn(null, props.className)}>\n    <Title subtitle color='light-grey'>Latest news</Title>\n    <CardList className={cn('list')} items={items} />\n  </div>\n);","import React from 'react';\n\nimport { getClassName } from 'tools/getClassName';\nimport { FONT_COLORS } from '../../../../colors.const';\nimport { Title } from '../../../../components/Title/Title';\nimport { Text } from '../../../../components/Text/Text';\n\nimport './PartnersCard.scss';\nimport { cloneElement } from '../../../../tools/cloneElement';\n\nconst cn = getClassName('partners-card');\n\nexport type Props = {\n  className?: string;\n  ImageNode: React.ReactNode;\n  title: string;\n  description?: string;\n}\n\nexport const PartnerCard = ({\n  className,\n  title,\n  description,\n  ImageNode,\n}: Props) => {\n  return (\n    <div className={cn(null, className)}>\n      <div className={cn('logo')}>\n        {cloneElement(ImageNode, { width: 256, height: 256, className: cn('image') })}\n      </div>\n      <div className={cn('text')}>\n        <Title as='h3' color='grey' subtitle className={cn('title')}>{title}</Title>\n        <Text color='light-grey'>{description}</Text>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { getClassName } from \"../../../tools/getClassName\";\nimport { Title } from \"../../../components/Title/Title\";\nimport { Card } from \"../../../components/Card/Card\";\n\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport { CardList } from \"../../../components/CardList/CardList\";\n\nimport './Partners.scss';\nimport { PartnerCard } from \"./__Card/PartnersCard\";\n\nconst cn = getClassName('partners');\n\nconst partners = [\n  {\n    title: 'Funlab',\n    ImageNode: <StaticImage src={'./assets/Funlab.jpg'} alt='Funlab logo' />,\n    description: 'Funlab description',\n  },\n  {\n    title: 'Smile school',\n    ImageNode: <StaticImage src={'./assets/SmileSchool.png'} alt='Smile school logo' />,\n    description: 'Smile school description',\n  },\n]\n\nexport const Partners = (props: { className?: string }) => (\n  <div className={cn(null, props.className)}>\n    <Title subtitle color='light-grey'>Partners</Title>\n    <div className={cn('content')}>\n      <div className={cn('list-wrapper')}>\n        <div className={cn('list')}>\n          <div className={cn('list-content')}>\n            {partners.map((partner) => (\n              <PartnerCard\n                className={cn('list-item')}\n                {...partner}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n","import React from \"react\";\nimport { getClassName } from \"../../../tools/getClassName\";\nimport { Title } from \"../../../components/Title/Title\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport { CardList } from \"../../../components/CardList/CardList\";\n\nimport './MasterClass.scss';\n\nconst cn = getClassName('master-class');\n\nexport const MasterClass = (props: { className?: string }) => (\n  <div className={cn(null, props.className)}>\n    <Title subtitle color='white'>Master class</Title>\n  </div>\n);","import { Link } from 'gatsby';\nimport React from 'react';\nimport { Button } from '../../../../components/Button/Button';\nimport { Text } from '../../../../components/Text/Text';\nimport { Title } from '../../../../components/Title/Title';\nimport { getClassName } from '../../../../tools/getClassName';\n\nimport { COLORS, TFontColors } from '../../../../colors.const';\n\nconst cn = getClassName('blog-card');\n\nimport './BlogCard.scss';\n\nexport type Props = {\n  className?: string;\n  title: string;\n  description?: string;\n  link: {\n    to: string;\n    title?: string;\n  },\n  color?: COLORS.GREEN | COLORS.RED;\n}\n\nconst textColor: Record<COLORS.GREEN | COLORS.RED, TFontColors> = {\n  [COLORS.GREEN]: 'light-green',\n  [COLORS.RED]: 'light-red',\n}\n\nexport const BlogCard = ({\n  className,\n  title,\n  description,\n  link,\n  color = COLORS.GREEN,\n}: Props) => {\n  const style = {\n    backgroundColor: color,\n  }\n\n  return (\n    <div style={style} className={cn()}>\n      <Title subtitle color='white' className={cn('title')}>\n        {title}\n      </Title>\n      <Text className={cn('description')} color='white'>\n        {description}\n      </Text>\n      <div className={cn('link')}>\n        <Link to={link.to} title={link.title}>\n          <Button color='white'>\n            <Text color={textColor[color]}>{link.title}</Text>\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { COLORS } from \"../../../colors.const\";\nimport { getClassName } from \"../../../tools/getClassName\";\n\nimport './Blog.scss';\nimport { BlogCard, Props as BlogCardProps } from \"./__Card/BlogCard\";\n\nconst cn = getClassName('blog');\n\nconst posts: BlogCardProps[] = [\n  {\n    title: 'Welcome note',\n    description: 'Astero brings to you a series of robotics master classes designed to usher novice and intermediate enthusiasts into the world of advanced robotics',\n    link: {\n      to: '',\n      title: 'Read more',\n    },\n    color: COLORS.GREEN,\n  },\n  {\n    title: 'Our vision',\n    description: 'Astero brings to you a series of robotics master classes designed to usher novice and intermediate enthusiasts into the world of advanced robotics',\n    link: {\n      to: '',\n      title: 'Read more',\n    },\n    color: COLORS.RED,\n  },\n]\n\nexport const Blog = (props: { className?: string }) => (\n  <div className={cn(null, props.className)}>\n    {posts.map((post) => (<BlogCard {...post} />))}\n  </div>\n);","import * as React from \"react\"\nimport { COLORS } from \"../colors.const\"\n\nimport Layout from \"components/layout\"\nimport Seo from \"components/seo\"\n\nimport { Slide, Props as SlideProps } from \"../components/Slide/Slide\"\n\nimport {\n  Main,\n  ProgrammingLanguages,\n  Overview,\n  News,\n  Partners,\n  MasterClass,\n  Blog,\n} from '../views/index';\n\nimport { getClassName } from \"../tools/getClassName\"\n\nimport './index.scss'\n\nconst cn = getClassName('index');\n\nconst Content = [\n  {\n    slide: { className: cn('slide', { type: 'main' }) },\n    content: <Main />,\n  },\n  {\n    slide: { flexible: true, className: cn('slide') },\n    content: <ProgrammingLanguages />,\n  },\n  {\n    slide: { flexible: true, className: cn('slide') },\n    content: <Overview />\n  },\n  {\n    slide: { flexible: true, className: cn('slide') },\n    content: <Partners />\n  },\n  {\n    slide: { backgroundColor: COLORS.MIGOL_BLUE, className: cn('slide', { type: 'master-class' }) },\n    content: <MasterClass />\n  },\n  {\n    slide: { flexible: true, className: cn('slide') },\n    content: <News />\n  },\n  {\n    slide: { flexible: true, className: cn('slide', { type: 'blog' }) },\n    content: <Blog />\n  },\n] as Array<{\n  slide: SlideProps,\n  content: React.ReactNode\n}>\n\n\nconst IndexPage = () => (\n  <Layout>\n    {Content.map(({ slide, content }) => (\n      <Slide {...slide}>\n        {content}\n      </Slide>\n    ))}\n  </Layout>\n)\n\nexport const Head = () => (<>\n  <Seo title=\"Home\" description={undefined} children={undefined} />\n</>)\n\nexport default IndexPage\n","import { withNaming } from '@bem-react/classname'\n\nexport const getClassName = withNaming({ e: '__', m: '_' });\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { getClassName } from \"../../tools/getClassName\";\n\nimport { Text } from \"../Text/Text\";\nimport './Header.scss';\n\nconst cn = getClassName(\"header\");\n\nexport const Header = ({ siteTitle }) => (\n  <header className={cn()}>\n    <div className={cn('brand')}>{siteTitle}</div>\n    <nav className={cn('links-group')}>\n      <Link className={cn('link')} to=\"\"><Text color='white'>Home</Text></Link>\n      <Link className={cn('link')} to=\"\"><Text color='white'>Classes</Text></Link>\n      <Link className={cn('link')} to=\"\"><Text color='white'>About</Text></Link>\n      <Link className={cn('link')} to=\"\"><Text color='white'>Events</Text></Link>\n      <Link className={cn('link')} to=\"\"><Text color='white'>Contact</Text></Link>\n    </nav>\n  </header>\n)\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { getClassName } from \"../../tools/getClassName\";\n\nimport { Text } from \"../Text/Text\";\nimport './Footer.scss';\nimport { Slide } from \"../Slide/Slide\";\nimport { COLORS } from \"../../colors.const\";\n\nconst cn = getClassName(\"footer\");\n\nexport const Footer = () => (\n  <Slide flexible backgroundColor={COLORS.FOOTER}>\n    <footer className={cn()}>\n      <div className={cn('brand')}>\n        <Text color='footer'>© {new Date().getFullYear()} &middot; Built with</Text>\n      </div>\n      \n    </footer>\n  </Slide>\n\n)\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport { Header } from \"./Header/Header\"\nimport { Footer } from \"./Footer/Footer\"\n\nimport '../common.scss';\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\n      <main>{children}</main>\n      <Footer />\n    </>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["r","t","i","a","o","f","e","v","s","m","u","hasOwnProperty","p","n","y","c","Array","isArray","length","l","valueOf","g","split","d","h","exports","withNaming","module","UPPERCASE","LOWERCASE","LEADING_CAPITAL","IDENTIFIER","SEPARATORS","LEADING_SEPARATORS","RegExp","source","SEPARATORS_AND_IDENTIFIER","NUMBERS_AND_IDENTIFIER","camelCase","input","options","TypeError","pascalCase","preserveConsecutiveUppercase","map","x","trim","filter","join","toLowerCase","locale","string","toLocaleLowerCase","toUpperCase","toLocaleUpperCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","slice","preserveCamelCase","replace","lastIndex","m1","charAt","_","identifier","postProcess","hasNativeLazyLoadSupport","HTMLImageElement","prototype","srcSet","width","height","layout","wrapperStyle","className","style","getMainProps","isLoading","isLoaded","images","loading","shouldLoad","_extends","opacity","getPlaceholderProps","placeholder","backgroundColor","objectFit","objectPosition","position","top","left","bottom","right","result","transition","Sizer","React","createElement","paddingTop","maxWidth","display","alt","role","src","LayoutWrapper","_ref","children","props","_objectWithoutPropertiesLoose","Fragment","Image","decoding","Picture","_ref2","fallback","sources","sizes","media","type","key","fallbackImage","propTypes","PropTypes","isRequired","displayName","Placeholder","_Picture$propTypes","propName","componentName","Error","MainImage","removeNewLines","str","altValidator","rest","image","_excluded","Set","renderImageToStringPromise","renderImage","GatsbyImageHydrator","as","class","preactClass","onStartLoad","onLoad","onError","getWrapperProps","wStyle","wClass","wrapperProps","root","useRef","useMemo","JSON","stringify","sizer","useEffect","import","then","renderImageToString","swapPlaceholderImage","ssrImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","animationFrame","cleanupCallback","innerHTML","requestAnimationFrame","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","GatsbyImage","memo","_getStaticImage","StaticImage","__imageData","imageData","__error","console","warn","imgClassName","imgStyle","placeholderBackgroundColor","cleanedImages","checkDimensionProps","number","validLayouts","GatsbyImageBrowser","COLORS","FONT_COLORS","cn","getClassName","Slide","HEART_OF_ICE","flexible","Text","color","Component","Title","subtitle","Button","Main","ProgrammingLanguages","cloneElement","elem","extraProps","Boolean","Card","title","ImageNode","CardList","items","item","Overview","News","PartnerCard","description","partners","Partners","partner","MasterClass","textColor","GREEN","RED","BlogCard","link","Link","to","posts","Blog","post","Content","slide","content","MIGOL_BLUE","Head","Seo","undefined","Layout","Header","siteTitle","Footer","FOOTER","Date","getFullYear","data","useStaticQuery","site","siteMetadata","metaDescription","defaultTitle","name","property","author"],"sourceRoot":""}